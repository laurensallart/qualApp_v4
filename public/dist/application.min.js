"use strict";var ApplicationConfiguration=function(){var applicationModuleName="qualapp",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.utils","ui.bootstrap","googlechart"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("thermostats"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/thermostats/views/list-thermostats.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("thermostats").run(["Menus",function(Menus){Menus.addMenuItem("topbar","New Thermostat","thermostats/create")}]),angular.module("thermostats").config(["$stateProvider",function($stateProvider){$stateProvider.state("listThermostats",{url:"/thermostats",templateUrl:"modules/thermostats/views/list-thermostats.client.view.html"}).state("createThermostat",{url:"/thermostats/create",templateUrl:"modules/thermostats/views/create-thermostat.client.view.html"}).state("viewThermostat",{url:"/thermostats/:thermostatId",templateUrl:"modules/thermostats/views/view-thermostat.client.view.html"}).state("viewSchedules",{url:"/thermostats/:thermostatId/schedules",templateUrl:"modules/thermostats/views/view-schedules.client.view.html"}).state("addSchedule",{url:"/thermostats/:thermostatId/schedules/addSchedule",templateUrl:"modules/thermostats/views/add-schedule.client.view.html"}).state("editSchedule",{url:"/thermostats/:thermostatId/schedules/:scheduleIndex",templateUrl:"modules/thermostats/views/edit-schedule.client.view.html"}).state("editThermostat",{url:"/thermostats/:thermostatId/edit",templateUrl:"modules/thermostats/views/edit-thermostat.client.view.html"}).state("addUser",{url:"/thermostats/:thermostatId/adduser",templateUrl:"modules/thermostats/views/addUser-thermostat.client.view.html"})}]),angular.module("thermostats").controller("AddUserController",["$scope","$stateParams","$location","Authentication","Thermostats","$timeout","UsersThermostat",function($scope,$stateParams,$location,Authentication,Thermostats,$timeout,UsersThermostat){$scope.findThermostat=function(){$scope.thermostat=Thermostats.get({thermostatId:$stateParams.thermostatId})},$scope.submitUser=function(){$scope.newUser=UsersThermostat.get({username:this.newUsername},function(){if(console.log($scope.newUser._id),$scope.newUser._id){var uniqueUser=!0;$scope.thermostat.users.forEach(function(user){console.log(user._id),user._id===$scope.newUser._id&&($scope.error="User already added to thermostat",uniqueUser=!1)}),uniqueUser&&($scope.thermostat.users.push($scope.newUser),$scope.thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}))}else $scope.error="username doesn't exist",console.log($scope.error)})},$scope.removeUser=function(userIndex){this.thermostat.users.splice(userIndex,1),this.thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("thermostats").filter("weekday",["$filter",function($filter){return function(input){if(null===input)return"";var weekday="";switch(input){case 1:weekday="Monday";break;case 2:weekday="Tuesday";break;case 3:weekday="Wednesday";break;case 4:weekday="Thursday";break;case 5:weekday="Friday";break;case 6:weekday="Saturday";break;case 7:weekday="Sunday"}return weekday}}]).filter("twoChar",["$filter",function($filter){return function(input){var output;return 10>input?(output="0",output+=String(input)):output=String(input),output}}]).controller("ThermostatsController",["$scope","$stateParams","$location","Authentication","Thermostats","$timeout","$log",function($scope,$stateParams,$location,Authentication,Thermostats,$timeout,$log){$scope.isCollapsed=!1,$scope.authentication=Authentication,$scope.setDesiredTemp=function(value){this.status.desiredTemperature=value},$scope.increaseTemp=function(){console.log(this),this.thermostat.status.desiredTemperature<30&&(this.thermostat.status.desiredTemperature+=.5,this.thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}))},$scope.decreaseTemp=function(){this.thermostat.status.desiredTemperature>0&&(this.thermostat.status.desiredTemperature-=.5,this.thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}))},$scope.removeSchedule=function(scheduleIndex){this.thermostat.schedules.splice(scheduleIndex,1),this.thermostat.$update(function(){$location.path("thermostats/"+this.thermostat._id+"/schedules")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.setChart=function(day,scheduleIndex,thermostat,chartObject){chartObject={type:"LineChart",displayed:!1,data:{cols:[{id:"time",label:"Time",type:"number",p:{}},{id:"temperature",label:"Temperature",type:"number"}],rows:[]},options:{title:"",legend:"none",fill:20,vAxis:{title:"temperature",ticks:[10,15,20,25,30]},hAxis:{title:"time",ticks:[2,4,6,8,10,12,14,16,18,20,22,24],titleTextStyle:{color:"#AAAAAA"},baselineColor:"#AAAAAA"},tooltip:{isHtml:!0}},formatters:{},view:{}};var indexDay=thermostat.schedules[scheduleIndex].days.indexOf(day);thermostat.schedules[scheduleIndex].days[indexDay].timePoints.sort(sort_by("hour",!1,parseInt)),angular.forEach(thermostat.schedules[scheduleIndex].days[indexDay].timePoints,function(timePoint,index){var time=timePoint.hour+timePoint.minute/60,time2=24,previousDay=indexDay-1;-1===previousDay&&(previousDay=6),thermostat.schedules[scheduleIndex].days[indexDay].timePoints.length!==index+1&&(time2=thermostat.schedules[scheduleIndex].days[indexDay].timePoints[index+1].hour+thermostat.schedules[scheduleIndex].days[indexDay].timePoints[index+1].minute/60),0===index&&0!==thermostat.schedules[scheduleIndex].days[previousDay].timePoints.length&&chartObject.data.rows.push({c:[{v:0,p:{}},{v:thermostat.schedules[scheduleIndex].days[previousDay].timePoints[thermostat.schedules[scheduleIndex].days[previousDay].timePoints.length-1].desiredTemperature,p:{}},null]},{c:[{v:time,p:{}},{v:thermostat.schedules[scheduleIndex].days[previousDay].timePoints[thermostat.schedules[scheduleIndex].days[previousDay].timePoints.length-1].desiredTemperature,p:{}},null]}),chartObject.data.rows.push({c:[{v:time,p:{}},{v:timePoint.desiredTemperature,p:{}},null]},{c:[{v:time2,p:{}},{v:timePoint.desiredTemperature,p:{}},null]})}),this.chartObject=chartObject};var sort_by=function(field,reverse,primer){var key=primer?function(x){return primer(x[field])}:function(x){return x[field]};return reverse=reverse?-1:1,function(a,b){return a=key(a),b=key(b),reverse*((a>b)-(b>a))}};$scope.showSchedules=function(){$location.path("thermostats/"+this.thermostat._id+"/schedules")},$scope.setupScheduleView=function(){$scope.scheduleIndex=$stateParams.scheduleIndex},$scope.findSchedule=function(){return console.log(this.schedules[$scope.index].label),this.schedules[$scope.index].label},$scope.addTimePoint=function(thermostat,scheduleIndex,day,hour,minute,desiredTemperature){var timepoint={hour:hour,minute:minute,desiredTemperature:desiredTemperature},indexDay=thermostat.schedules[scheduleIndex].days.indexOf(day);thermostat.schedules[scheduleIndex].days[indexDay].timePoints.push(timepoint),thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.create=function(){var thermostat=new Thermostats({name:this.name,status:{desiredTemperature:this.status.desiredTemperature,currentTemperature:this.status.currentTemperature,heaterStatus:this.status.heaterStatus},ipAddress:this.ipAddress,schedules:[{label:"workweek",isActive:!0,scheduleVersion:Date.now(),days:[{day:1,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]},{day:2,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]},{day:3,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]},{day:4,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]},{day:5,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]},{day:6,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]},{day:7,timePoints:[{hour:9,minute:0,desiredTemperature:22},{hour:22,minute:0,desiredTemperature:16}]}]}]});thermostat.$save(function(response){$location.path("thermostats/"+response._id),$scope.name="",$scope.status.desiredTemperature="",$scope.status.currentTemperature="",$scope.status.heaterStatus="",$scope.ipAddress=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeTimePoint=function(timePoint,day,scheduleIndex,thermostat){var indexDay=thermostat.schedules[scheduleIndex].days.indexOf(day),indexTimePoint=thermostat.schedules[scheduleIndex].days[indexDay].timePoints.indexOf(timePoint);thermostat.schedules[scheduleIndex].days[indexDay].timePoints.splice(indexTimePoint,1),thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(thermostat){if(thermostat){thermostat.$remove();for(var i in $scope.thermostats)$scope.thermostats[i]===thermostat&&$scope.thermostats.splice(i,1)}else $scope.thermostat.$remove(function(){$location.path("thermostats")})},$scope.update=function(){var thermostat=$scope.thermostat;thermostat.$update(function(){$location.path("thermostats/"+thermostat._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.changeScheduleName=function(){var thermostat=$scope.thermostat;thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.connectUser=function(){var thermostat=Thermostats.get({thermostatId:this.objectId},function(){thermostat.user=$scope.authentication.user._id,thermostat.users.push($scope.authentication.user._id),thermostat.$update(function(){$location.path("thermostats")},function(errorResponse){$scope.error=errorResponse.data.message})})},$scope.find=function(){$scope.thermostats=Thermostats.query(function(){1===$scope.thermostats.length&&$location.path("thermostats/"+$scope.thermostats[0]._id)})},$scope.findOne=function(){$scope.thermostat=Thermostats.get({thermostatId:$stateParams.thermostatId})},$scope.addUser=function(){$scope.thermostat.users.push("56268771955d78959a938a6b"),console.log($scope);var thermostat=$scope.thermostat;thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.addSchedule=function(thermostat){var newSchedule={label:"Schedule "+(thermostat.schedules.length+1).toString(),isActive:!1,scheduleVersion:Date.now(),days:[{day:1,timePoints:[{hour:7,minute:0,desiredTemperature:22},{hour:9,minute:0,desiredTemperature:16},{hour:17,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]},{day:2,timePoints:[{hour:7,minute:0,desiredTemperature:22},{hour:9,minute:0,desiredTemperature:16},{hour:17,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]},{day:3,timePoints:[{hour:7,minute:0,desiredTemperature:22},{hour:9,minute:0,desiredTemperature:16},{hour:17,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]},{day:4,timePoints:[{hour:7,minute:0,desiredTemperature:22},{hour:9,minute:0,desiredTemperature:16},{hour:17,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]},{day:5,timePoints:[{hour:7,minute:0,desiredTemperature:22},{hour:9,minute:0,desiredTemperature:16},{hour:17,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]},{day:6,timePoints:[{hour:8,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]},{day:7,timePoints:[{hour:8,minute:0,desiredTemperature:22},{hour:23,minute:0,desiredTemperature:16}]}]};thermostat.schedules.push(newSchedule);var lastIndex=thermostat.schedules.length-1;thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message}),$location.path("thermostats/"+this.thermostat._id+"/schedules/"+lastIndex)},$scope.saveEdit=function(){$scope.editing=!1},$scope.activateSchedule=function(scheduleIndex){if(this.thermostat.schedules[scheduleIndex].isActive)this.thermostat.schedules[scheduleIndex].isActive=!1;else{for(var ind=0;ind<this.thermostat.schedules.length;ind++)ind!==scheduleIndex&&this.thermostat.schedules[ind].isActive&&(this.thermostat.schedules[ind].isActive=!1);this.thermostat.schedules[scheduleIndex].isActive=!0}this.thermostat.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("thermostats").factory("Thermostats",["$resource",function($resource){return $resource("thermostats/:thermostatId",{thermostatId:"@_id"},{update:{method:"PUT"}})}]).factory("UsersThermostat",["$resource",function($resource){return $resource("users/:username",{username:"@username"})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);